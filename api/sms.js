// api/sms.js
require('dotenv').config();
const twilio = require('twilio');

const accountSid = process.env.TWILIO_ACCOUNT_SID;
const authToken = process.env.TWILIO_AUTH_TOKEN;
const twilioPhoneNumber = process.env.TWILIO_PHONE_NUMBER;

const client = twilio(accountSid, authToken);

const responses = {
bienvenida: `üëã ¬°Hola! Soy **Nomi**, tu asistente virtual ü§ñüåü\n\nEstoy aqu√≠ para ayudarte con temas de bienestar laboral y Recursos Humanos.\n\nResponde con el n√∫mero de la opci√≥n que necesites:\n\n1Ô∏è‚É£ - üìã Contestar encuesta **NOM-035**\n2Ô∏è‚É£ - üß† Realizar evaluaci√≥n de desempe√±o\n3Ô∏è‚É£ - üë©‚Äçüíº Contactar a una persona de Recursos Humanos\n4Ô∏è‚É£ - ‚è∞ Consultar horarios y tiempos de respuesta`,
opcion1_pregunta1: '‚úçÔ∏è ¬øCu√°ntos colaboradores hay en tu centro de trabajo?',
opcion2_seleccion_puesto: 'Selecciona el puesto que deseas evaluar:\n\nüîë Ama de llaves\nüîß Mantenimiento\nüë®‚Äçüç≥ Cocinero\nüß∫ Lavander√≠a\n‚è±Ô∏è Checador\nüõéÔ∏è Recepcionista\nüõ†Ô∏è Ayudante general\nüíº Recursos Humanos',
opcion4_contacto_rh: 'üìß En breve, alguien de R.H. se pondr√° en contacto contigo.\n\nüïí Horario: Lunes a Viernes de 8:00 a.m. a 5:00 p.m.',
opcion5_horarios: '‚è∞ Horario de atenci√≥n: Lunes a Viernes de 8:00 a.m. a 5:00 p.m.\n\nüì® Si escribes fuera de este horario, te responderemos el siguiente d√≠a h√°bil.\n\nüè• Cumplamos juntos la NOM-035\n\nüë• Cuidando el bienestar de todas las personas trabajadoras.',
formulario_desempeno: (puesto) => `‚úâÔ∏è Por favor, llena el siguiente formulario:\n\nEvaluaci√≥n para ${puesto}\n\nIncluye:\nNombre completo por apellido\nPuesto\nAntig√ºedad`,
guia1_link: 'üîó Contestar Gu√≠a I',
guia2_link: 'üîó Contestar Gu√≠a II (46 preguntas)',
guia3_link: 'üîó Contestar Gu√≠a III (72 preguntas)',
};

const userStates = {}; // Para mantener el estado de cada usuario

export default async (req, res) => {
if (req.method === 'POST') {
const { From: userPhoneNumber, Body: incomingMessage } = req.body;
const message = incomingMessage.trim();
let responseText = '';

if (!userStates[userPhoneNumber]) {
    userStates[userPhoneNumber] = { state: 'initial' };
    responseText = responses.bienvenida;
} else {
    const currentState = userStates[userPhoneNumber].state;
    const userData = userStates[userPhoneNumber].data || {};

    switch (currentState) {
    case 'initial':
        if (message === '1') {
        userStates[userPhoneNumber].state = 'nom035_pregunta1';
        responseText = responses.opcion1_pregunta1;
        } else if (message === '2') {
        userStates[userPhoneNumber].state = 'desempeno_seleccion_puesto';
        responseText = responses.opcion2_seleccion_puesto;
        } else if (message === '3') {
        responseText = responses.opcion4_contacto_rh;
        } else if (message === '4') {
        responseText = responses.opcion5_horarios;
        } else {
        responseText = 'Opci√≥n no v√°lida. Por favor, elige un n√∫mero del men√∫.';
        }
        break;

    case 'nom035_pregunta1':
        const numColaboradores = parseInt(message, 10);
        if (!isNaN(numColaboradores)) {
        responseText = 'De acuerdo a tu n√∫mero de colaboradores:\n';
        if (numColaboradores < 15) {
            responseText += `- Aplica solo la Gu√≠a I.\n${responses.guia1_link}`;
        } else if (numColaboradores >= 16 && numColaboradores <= 50) {
            responseText += `- Aplica Gu√≠as I, II y V.\n${responses.guia1_link}\n${responses.guia2_link}`;
        } else {
            responseText += `- Aplica Gu√≠as I, III y V.\n${responses.guia1_link}\n${responses.guia3_link}`;
        }
        delete userStates[userPhoneNumber]; // Reset state after providing the links
        } else {
        responseText = 'Por favor, ingresa un n√∫mero v√°lido de colaboradores.';
        }
        break;

    case 'desempeno_seleccion_puesto':
        const puestos = {
        '1': 'Ama de llaves',
        '2': 'Mantenimiento',
        '3': 'Cocinero',
        '4': 'Lavander√≠a',
        '5': 'Checador',
        '6': 'Recepcionista',
        '7': 'Ayudante general',
        '8': 'Recursos Humanos',
        };
        if (puestos[message]) {
        const puestoSeleccionado = puestos[message];
        responseText = responses.formulario_desempeno(puestoSeleccionado);
        delete userStates[userPhoneNumber]; // For simplicity, we reset here. In a real scenario, you'd handle form submission.
        } else {
        responseText = 'Opci√≥n de puesto no v√°lida. Por favor, elige un n√∫mero de la lista.';
        }
        break;

    default:
        responseText = responses.bienvenida;
        delete userStates[userPhoneNumber];
    }
}

if (responseText) {
    try {
    await client.messages.create({
        body: responseText,
        from: twilioPhoneNumber,
        to: userPhoneNumber,
    });
    res.status(200).send('Mensaje enviado correctamente.');
    } catch (error) {
    console.error('Error al enviar el mensaje:', error);
    res.status(500).send('Error al enviar el mensaje.');
    }
} else {
    res.status(200).send('No se gener√≥ respuesta.');
}
} else {
res.status(405).send('M√©todo no permitido.');
}
};